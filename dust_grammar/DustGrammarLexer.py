# Generated from DustGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,261,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,5,19,186,8,19,10,19,12,19,189,9,19,
        1,20,1,20,5,20,193,8,20,10,20,12,20,196,9,20,1,20,3,20,199,8,20,
        1,21,4,21,202,8,21,11,21,12,21,203,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,0,0,46,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,1,
        0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,
        1,0,48,57,1,0,48,48,3,0,9,10,13,13,32,32,264,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,
        0,3,98,1,0,0,0,5,104,1,0,0,0,7,112,1,0,0,0,9,114,1,0,0,0,11,116,
        1,0,0,0,13,120,1,0,0,0,15,125,1,0,0,0,17,129,1,0,0,0,19,132,1,0,
        0,0,21,137,1,0,0,0,23,145,1,0,0,0,25,149,1,0,0,0,27,155,1,0,0,0,
        29,162,1,0,0,0,31,165,1,0,0,0,33,169,1,0,0,0,35,174,1,0,0,0,37,180,
        1,0,0,0,39,183,1,0,0,0,41,198,1,0,0,0,43,201,1,0,0,0,45,207,1,0,
        0,0,47,209,1,0,0,0,49,211,1,0,0,0,51,213,1,0,0,0,53,215,1,0,0,0,
        55,217,1,0,0,0,57,220,1,0,0,0,59,222,1,0,0,0,61,224,1,0,0,0,63,226,
        1,0,0,0,65,228,1,0,0,0,67,230,1,0,0,0,69,232,1,0,0,0,71,234,1,0,
        0,0,73,236,1,0,0,0,75,239,1,0,0,0,77,241,1,0,0,0,79,244,1,0,0,0,
        81,247,1,0,0,0,83,249,1,0,0,0,85,251,1,0,0,0,87,254,1,0,0,0,89,257,
        1,0,0,0,91,259,1,0,0,0,93,94,5,109,0,0,94,95,5,97,0,0,95,96,5,105,
        0,0,96,97,5,110,0,0,97,2,1,0,0,0,98,99,5,112,0,0,99,100,5,114,0,
        0,100,101,5,105,0,0,101,102,5,110,0,0,102,103,5,116,0,0,103,4,1,
        0,0,0,104,105,5,112,0,0,105,106,5,114,0,0,106,107,5,105,0,0,107,
        108,5,110,0,0,108,109,5,116,0,0,109,110,5,108,0,0,110,111,5,110,
        0,0,111,6,1,0,0,0,112,113,5,123,0,0,113,8,1,0,0,0,114,115,5,125,
        0,0,115,10,1,0,0,0,116,117,5,105,0,0,117,118,5,110,0,0,118,119,5,
        116,0,0,119,12,1,0,0,0,120,121,5,98,0,0,121,122,5,111,0,0,122,123,
        5,111,0,0,123,124,5,108,0,0,124,14,1,0,0,0,125,126,5,115,0,0,126,
        127,5,101,0,0,127,128,5,116,0,0,128,16,1,0,0,0,129,130,5,105,0,0,
        130,131,5,102,0,0,131,18,1,0,0,0,132,133,5,101,0,0,133,134,5,108,
        0,0,134,135,5,115,0,0,135,136,5,101,0,0,136,20,1,0,0,0,137,138,5,
        101,0,0,138,139,5,108,0,0,139,140,5,115,0,0,140,141,5,101,0,0,141,
        142,5,32,0,0,142,143,5,105,0,0,143,144,5,102,0,0,144,22,1,0,0,0,
        145,146,5,102,0,0,146,147,5,111,0,0,147,148,5,114,0,0,148,24,1,0,
        0,0,149,150,5,119,0,0,150,151,5,104,0,0,151,152,5,105,0,0,152,153,
        5,108,0,0,153,154,5,101,0,0,154,26,1,0,0,0,155,156,5,114,0,0,156,
        157,5,101,0,0,157,158,5,116,0,0,158,159,5,117,0,0,159,160,5,114,
        0,0,160,161,5,110,0,0,161,28,1,0,0,0,162,163,5,102,0,0,163,164,5,
        110,0,0,164,30,1,0,0,0,165,166,5,108,0,0,166,167,5,101,0,0,167,168,
        5,116,0,0,168,32,1,0,0,0,169,170,5,116,0,0,170,171,5,114,0,0,171,
        172,5,117,0,0,172,173,5,101,0,0,173,34,1,0,0,0,174,175,5,102,0,0,
        175,176,5,97,0,0,176,177,5,108,0,0,177,178,5,115,0,0,178,179,5,101,
        0,0,179,36,1,0,0,0,180,181,5,105,0,0,181,182,5,110,0,0,182,38,1,
        0,0,0,183,187,7,0,0,0,184,186,7,1,0,0,185,184,1,0,0,0,186,189,1,
        0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,40,1,0,0,0,189,187,1,0,
        0,0,190,194,7,2,0,0,191,193,7,3,0,0,192,191,1,0,0,0,193,196,1,0,
        0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,199,1,0,0,0,196,194,1,0,
        0,0,197,199,7,4,0,0,198,190,1,0,0,0,198,197,1,0,0,0,199,42,1,0,0,
        0,200,202,7,5,0,0,201,200,1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,
        0,203,204,1,0,0,0,204,205,1,0,0,0,205,206,6,21,0,0,206,44,1,0,0,
        0,207,208,5,40,0,0,208,46,1,0,0,0,209,210,5,41,0,0,210,48,1,0,0,
        0,211,212,5,91,0,0,212,50,1,0,0,0,213,214,5,93,0,0,214,52,1,0,0,
        0,215,216,5,58,0,0,216,54,1,0,0,0,217,218,5,45,0,0,218,219,5,62,
        0,0,219,56,1,0,0,0,220,221,5,59,0,0,221,58,1,0,0,0,222,223,5,44,
        0,0,223,60,1,0,0,0,224,225,5,43,0,0,225,62,1,0,0,0,226,227,5,45,
        0,0,227,64,1,0,0,0,228,229,5,42,0,0,229,66,1,0,0,0,230,231,5,47,
        0,0,231,68,1,0,0,0,232,233,5,94,0,0,233,70,1,0,0,0,234,235,5,61,
        0,0,235,72,1,0,0,0,236,237,5,46,0,0,237,238,5,46,0,0,238,74,1,0,
        0,0,239,240,5,33,0,0,240,76,1,0,0,0,241,242,5,61,0,0,242,243,5,61,
        0,0,243,78,1,0,0,0,244,245,5,33,0,0,245,246,5,61,0,0,246,80,1,0,
        0,0,247,248,5,60,0,0,248,82,1,0,0,0,249,250,5,62,0,0,250,84,1,0,
        0,0,251,252,5,60,0,0,252,253,5,61,0,0,253,86,1,0,0,0,254,255,5,62,
        0,0,255,256,5,61,0,0,256,88,1,0,0,0,257,258,5,38,0,0,258,90,1,0,
        0,0,259,260,5,124,0,0,260,92,1,0,0,0,5,0,187,194,198,203,1,6,0,0
    ]

class DustGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    BEGIN = 4
    END = 5
    INT = 6
    BOOL = 7
    SET = 8
    IF = 9
    ELSE = 10
    ELSEIF = 11
    FOR = 12
    WHILE = 13
    RETURN = 14
    FN = 15
    LET = 16
    TRUE = 17
    FALSE = 18
    IN = 19
    ID = 20
    NUMBER = 21
    WS = 22
    LPAREN = 23
    RPAREN = 24
    LBRACKET = 25
    RBRACKET = 26
    COLON = 27
    ARROW = 28
    SEMICOLON = 29
    COMMA = 30
    PLUS = 31
    MINUS = 32
    MULTIPLY = 33
    DIVIDE = 34
    POW = 35
    ASSIGN = 36
    RANGE = 37
    NEGATION = 38
    EQUAL = 39
    NON_EQUAL = 40
    LESS = 41
    GREATER = 42
    LESS_OR_EQUAL = 43
    GREATER_OR_EQUAL = 44
    AND = 45
    OR = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'print'", "'println'", "'{'", "'}'", "'int'", "'bool'", 
            "'set'", "'if'", "'else'", "'else if'", "'for'", "'while'", 
            "'return'", "'fn'", "'let'", "'true'", "'false'", "'in'", "'('", 
            "')'", "'['", "']'", "':'", "'->'", "';'", "','", "'+'", "'-'", 
            "'*'", "'/'", "'^'", "'='", "'..'", "'!'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'&'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "BEGIN", "END", "INT", "BOOL", "SET", "IF", "ELSE", "ELSEIF", 
            "FOR", "WHILE", "RETURN", "FN", "LET", "TRUE", "FALSE", "IN", 
            "ID", "NUMBER", "WS", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
            "COLON", "ARROW", "SEMICOLON", "COMMA", "PLUS", "MINUS", "MULTIPLY", 
            "DIVIDE", "POW", "ASSIGN", "RANGE", "NEGATION", "EQUAL", "NON_EQUAL", 
            "LESS", "GREATER", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "AND", 
            "OR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "BEGIN", "END", "INT", "BOOL", 
                  "SET", "IF", "ELSE", "ELSEIF", "FOR", "WHILE", "RETURN", 
                  "FN", "LET", "TRUE", "FALSE", "IN", "ID", "NUMBER", "WS", 
                  "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "ARROW", 
                  "SEMICOLON", "COMMA", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "POW", "ASSIGN", "RANGE", "NEGATION", "EQUAL", "NON_EQUAL", 
                  "LESS", "GREATER", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", 
                  "AND", "OR" ]

    grammarFileName = "DustGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


